{
  "simple": {
    "id": 61756349,
    "lang": "C++",
    "time": "1\u00a0\u5e74\uff0c11\u00a0\u6708",
    "status_display": "Accepted",
    "runtime": "260 ms",
    "url": "/submissions/detail/61756349/",
    "is_pending": "Not Pending",
    "title": "\u5b9e\u73b0 Trie (\u524d\u7f00\u6811)",
    "timestamp": 1586581469,
    "memory": "112 MB"
  },
  "full": {
    "id": "61756349",
    "code": "class Trie {\npublic:\n    /** Initialize your data structure here. */\n    unordered_map<string, bool> b1, b2;\n    Trie() {\n        b1.clear();\n        b2.clear();\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        b1[word] = 1;\n        for(int i = 1; i <= (int)word.size(); ++i)\n            b2[word.substr(0, i)] = 1;\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        return b1[word];\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        return b2[prefix];\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */",
    "runtime": "260 ms",
    "memory": "112 MB",
    "rawMemory": "114676000",
    "statusDisplay": "Accepted",
    "timestamp": 1586581469,
    "lang": "cpp",
    "passedTestCaseCnt": 15,
    "totalTestCaseCnt": 15,
    "sourceUrl": "/problems/implement-trie-prefix-tree/",
    "question": {
      "titleSlug": "implement-trie-prefix-tree",
      "title": "Implement Trie (Prefix Tree)",
      "translatedTitle": "\u5b9e\u73b0 Trie (\u524d\u7f00\u6811)",
      "questionId": "208",
      "__typename": "QuestionNode"
    },
    "outputDetail": {
      "codeOutput": "",
      "expectedOutput": "",
      "input": "",
      "compileError": "",
      "runtimeError": "",
      "lastTestcase": "",
      "__typename": "SubmissionOutputNode"
    },
    "__typename": "GeneralSubmissionNode",
    "submissionComment": null
  }
}
